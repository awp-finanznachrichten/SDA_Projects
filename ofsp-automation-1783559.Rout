
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(rvest)
> library(tidyverse)
-- Attaching packages --------------------------------------- tidyverse 1.3.1 --
v ggplot2 3.3.5     v purrr   0.3.4
v tibble  3.1.1     v dplyr   1.0.6
v tidyr   1.1.3     v stringr 1.4.0
v readr   1.4.0     v forcats 0.5.1
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x dplyr::filter()         masks stats::filter()
x readr::guess_encoding() masks rvest::guess_encoding()
x dplyr::lag()            masks stats::lag()
Warning messages:
1: package 'tidyverse' was built under R version 3.6.3 
2: package 'tibble' was built under R version 3.6.3 
3: package 'tidyr' was built under R version 3.6.3 
4: package 'readr' was built under R version 3.6.3 
5: package 'purrr' was built under R version 3.6.3 
6: package 'dplyr' was built under R version 3.6.3 
7: package 'forcats' was built under R version 3.6.3 
> library(stringr)
> library(RCurl)
Loading required package: bitops

Attaching package: 'RCurl'

The following object is masked from 'package:tidyr':

    complete

> library(readxl)
> library("rio")
> library(gsubfn)
Loading required package: proto
Warning messages:
1: package 'gsubfn' was built under R version 3.6.3 
2: package 'proto' was built under R version 3.6.3 
> library(lubridate)

Attaching package: 'lubridate'

The following objects are masked from 'package:base':

    date, intersect, setdiff, union

Warning message:
package 'lubridate' was built under R version 3.6.3 
> library(naptime)
Warning message:
package 'naptime' was built under R version 3.6.3 
> library(scales)

Attaching package: 'scales'

The following object is masked from 'package:purrr':

    discard

The following object is masked from 'package:readr':

    col_factor

Warning message:
package 'scales' was built under R version 3.6.3 
> library(xml2)
Warning message:
package 'xml2' was built under R version 3.6.3 
> library(git2r)

Attaching package: 'git2r'

The following objects are masked from 'package:RCurl':

    clone, push, reset

The following object is masked from 'package:dplyr':

    pull

The following objects are masked from 'package:purrr':

    is_empty, when

Warning message:
package 'git2r' was built under R version 3.6.3 
> 
> 
> setwd("C:/Automatisierungen/SDA_Projects")
> 
> gitcommit <- function(msg = "commit from Rstudio", dir = getwd()){
+   cmd = sprintf("git commit -m\"%s\"",msg)
+   system(cmd)
+ }
> 
> gitstatus <- function(dir = getwd()){
+   cmd_list <- list(
+     cmd1 = tolower(substr(dir,1,2)),
+     cmd2 = paste("cd",dir),
+     cmd3 = "git status"
+   )
+   cmd <- paste(unlist(cmd_list),collapse = " & ")
+   shell(cmd)
+ }
> 
> gitadd <- function(dir = getwd()){
+   cmd_list <- list(
+     cmd1 = tolower(substr(dir,1,2)),
+     cmd2 = paste("cd",dir),
+     cmd3 = "git add --all"
+   )
+   cmd <- paste(unlist(cmd_list),collapse = " & ")
+   shell(cmd)
+ }
> 
> gitpush <- function(dir = getwd()){
+   cmd_list <- list(
+     cmd1 = tolower(substr(dir,1,2)),
+     cmd2 = paste("cd",dir),
+     cmd3 = "git push"
+   )
+   cmd <- paste(unlist(cmd_list),collapse = " & ")
+   shell(cmd)
+ }
> 
> 
> ######tool box
> 
> # if you need to specify a path for saving the folder of the file
> # not in use here because of dropbox 
> pathSu<-''
> pathIn<-''
> pathIt<-''
> 
> 
> 
> #putting the ' where it belongs in numbers higher than 10'000, variable is the number
> bigNum<- function(bNum) {
+   bNum<-ifelse(bNum >= 10000, format(bNum, big.mark="'", scientific=FALSE),bNum)
+ }
> 
> #Writing small numbers, second argument language= 'it', 'de', or 'fr' (if missing, it goes with french)
> smallNum<- function(sNum,lan){
+   if (missing(lan)){lan='fr'}
+   chiffre<-c('un','deux','trois','quatre','cinq','six','sept','huit','neuf','dix')
+   chiffreD<-c('ein','zwei', 'drei', 'vier', 'fÃ¼nf', 'sechs', 'sieben', 'acht', 'neun', 'zehn')
+   chiffreI<-c('uno', 'due', 'tre', 'quattro', 'cinque', 'sei', 'sette', 'otto', 'nove', 'dieci')
+   if(lan=='de'){
+     sNum<-ifelse(sNum <= 10, chiffreD[sNum],sNum)
+   } else if (lan=='it'){
+     sNum<-ifelse(sNum <= 10, chiffreI[sNum],sNum)
+   } else if (lan=='fr') {
+     sNum<-ifelse(sNum <= 10, chiffre[sNum],sNum)
+   } else {
+     sNum
+   }
+   
+ }
> 
> 
> #days of the week in 3 different languages second argument lan= 'it', 'de', or 'fr' (if missing, it goes with french)
> dayM<- function(date, lan) {
+   if (missing(lan)){lan='fr'}
+   num<-wday(date)
+   dayE<-c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')
+   dayD<-c('Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag')
+   dayI<-c('domenica', 'lunedÃ¬', 'martedÃ¬', 'mercoledÃ¬', 'giovedÃ¬','venerdÃ¬', 'sabato')
+   dayF<-c('dimanche', 'lundi','mardi','mercredi','jeudi','vendredi','samedi')
+   wday(date)
+   if(lan=='de'){
+     day<-dayD[num]
+   } else if (lan=='it'){
+     day<-dayI[num]
+   } else if (lan=='fr') {
+     day<-dayF[num]
+   } else {
+     day<-dayF[num]
+   }
+   return(day)
+ }
> 
> 
> # triple options selector,
> # enter the number and 3 possible texts (one,many,none)
> # return the  corresponding paragraphe
> # used for hospitalization or death in the lead
> selectText<- function(num,varOne,varMult,varNone){
+   if (num==1){
+     para<-varOne
+   } else if (num>1){
+     para<-varMult
+   } else if (num<=0) {
+     para<-varNone
+   }
+   return(para)
+ }
> 
> 
> # Create file name adding the date
> # fname=given by the user "exemple.mrs"
> # pathDesk= if you want to put it in a different directory
> createFileName<- function(fname,pathDesk) {
+   library(filenamer)
+   if (missing(pathDesk)) {pathDesk=''}
+   f <- as.filename(fname)
+   txt <- tag(f, dateFormat)
+   txt<-tag(pathDesk,txt) # add path in the arg somethings among those line to save in the correct path
+ }
> 
> 
> #Different functions to create the file
> 
> #create the final file function, needs to be updated in case of longer text and in case of saving
> #the it file still use the first one, it's the shortest of the 3 languages
> createFile<- function(fsource, fname,lead,par1,par2,par3,titleShort,titleLong) {
+   tx  <- readLines(fsource)
+   tx2  <- gsub(pattern = "Leadtxt", replace = lead, x = tx)
+   tx2  <- gsub(pattern = "Paragraphe1", replace = par1, x = tx2)
+   tx2  <- gsub(pattern = "Paragraphe2", replace = par2, x = tx2)
+   tx2  <- gsub(pattern = "Paragraphe3", replace = par3, x = tx2)
+   tx2  <- gsub(pattern = "titreCourt", replace = titleShort, x = tx2)
+   tx2  <- gsub(pattern = "titreLong", replace = titleLong, x = tx2)
+   writeLines(tx2, con=fname)
+ }
> 
> # not in use anymore
> createFile4<- function(fsource, fname,lead,par1,par2,par3,par4,titleShort,titleLong) {
+   tx  <- readLines(fsource)
+   tx2  <- gsub(pattern = "Leadtxt", replace = lead, x = tx)
+   tx2  <- gsub(pattern = "Paragraphe1", replace = par1, x = tx2)
+   tx2  <- gsub(pattern = "Paragraphe2", replace = par2, x = tx2)
+   tx2  <- gsub(pattern = "Paragraphe3", replace = par3, x = tx2)
+   tx2  <- gsub(pattern = "Paragraphe4", replace = par4, x = tx2)
+   tx2  <- gsub(pattern = "titreCourt", replace = titleShort, x = tx2)
+   tx2  <- gsub(pattern = "titreLong", replace = titleLong, x = tx2)
+   writeLines(tx2, con=fname)
+ }
> 
> # This is the function for the DE and FR file, it uses a list for the paragraphs
> # create the final file function up to 9 paragraphes (lead not included) careful
> # fsource= the document to open and change (.mrs)
> # fname= the name of the final file (made by createFileName)
> # numPar= the number of paragraphs that we need (the excess is deleted, so be precise)
> # titleShort,titleLong,lead,par, the different element to change, par is a list of string
> createFile9<- function(fsource, fname, numPar, titleShort,titleLong,lead,par) {
+   tx  <- readLines(fsource)
+   tx2  <- gsub(pattern = "titreCourt", replace = titleShort, x = tx)
+   tx2  <- gsub(pattern = "titreLong", replace = titleLong, x = tx2)
+   tx2  <- gsub(pattern = "Leadtxt", replace = lead, x = tx2)
+   for (i in 1:9){
+     pat<-sprintf("Paragraphe%s",i)
+     if (numPar>=i){
+       tx2  <- gsub(pattern = pat, replace = as.character(par[i]), x = tx2)
+     } else if (numPar<i){
+       tx2  <- gsub(pattern = pat, replace ='', x = tx2)
+     }
+   }
+   writeLines(tx2, con=fname)
+ }
> 
> #######
> 
> 
> 
> #Getting on the webpage
> url <- "https://www.covid19.admin.ch/fr/overview?ovTime=total"
> h <- read_html(url)
> 
> #finding what today is
> today<-wday(Sys.time())
> 
> #not very relevant anymore, but if you need to know what day was yesterday, here you have it
> yesterday<-today-1
> 
> 
> # The table option
> # I ended up not using tbls in this version, but you can use it to shorten the script
> tbls <- html_nodes(h, "table")
> 
> # Extract the date 
> date<-h %>% 
+   html_nodes(xpath = "/html/body/app-root/bag-dashboard/main/bag-overview/div/div[1]/div[3]/bag-card-overview-case/bag-overview-card/div/div/p")
> date<-as.character(date)
> date
[1] "<p class=\"card__subtitle\"><!----> Source: OFSP – État : 02.08.2021, 07 h 50 <!----><!----></p>\n"
> 
> # Transform it in a date format and extract the day
> dateFormat<- strapply(date, "\\d{1,2}\\.\\d{1,2}\\.\\d{4}")[[1]][1]
> date<-as.Date(dateFormat, format="%d.%m.%Y", optional = FALSE, tz="GMT")
> day<-wday(date)
> date
[1] "2021-08-02"
> day
[1] 2
> 
> # Finding total number of cases as yesterday
> # Look for the node table, they are currently 10 tables on the website
> # Access them by index (here .[1])
> newNumber<-h %>%
+   html_nodes("table") %>%
+   .[1] %>%
+   html_table(fill = TRUE)
> 
> # From the table, isolate the column that we are interested in
> cas<-newNumber[[1]][2]
> cas<-cas[[1]]
> cas
[1] "2019"    "719 684" "8325,07"
> 
> # Extract the number and make it into a numeric format
> totCasesYesterday<-as.numeric(gsub("\\D+", "",cas[2]))
> totCasesYesterday
[1] 719684
> 
> 
> #####Loop
> # setting the variable before the loop to make sure it runs properly
> day<-10
> totCases<-totCasesYesterday
> n<-0
> 
> # Two conditions are look upon, as the website was not always updated properly
> # It checks if we are today, and if the number of cases has changed
> while (today != day && totCasesYesterday == totCases) {
+   url <- "https://www.covid19.admin.ch/fr/overview?ovTime=total"
+   h <- read_html(url)
+   #the number of cases option
+   tbls <- html_nodes(h, "card")
+   #finding the day
+   date<-h %>% 
+     html_nodes(xpath = "/html/body/app-root/bag-dashboard/main/bag-overview/div/div[1]/div[3]/bag-card-overview-case/bag-overview-card/div/div/p")
+   date<-as.character(date)
+   date
+   dateFormat<- strapply(date, "\\d{1,2}\\.\\d{1,2}\\.\\d{4}")[[1]][1]
+   date<-as.Date(dateFormat, format="%d.%m.%Y", optional = FALSE, tz="GMT")
+   day<-wday(date)
+   #finding the number of cases
+   newNumber<-h %>%
+     html_nodes("table") %>%
+     .[1] %>%
+     html_table(fill = TRUE)
+   cas<-newNumber[[1]][2]
+   cas<-cas[[1]]
+   cas
+   totCases<-as.numeric(gsub("\\D+", "",cas[2]))
+   # just in case it start to run on a weekend, will stop it
+   if(today==7 | today==1) {
+     day <- today
+   }
+   # An exit condition, to avoid an infinite loop
+   # Stop running after 3h45min, in case something wrong
+   n<-n+1
+   if(n > 4500) {day <- today} 
+   # it does a little nap for 3 second before next loop
+   # Used to limit the computing power, if it's not a problem, this is not needed
+   naptime(3)
+ }
